recombine tables (from this can create table which will display the lines)
this query will create a table where every row represents one line from a birth city to a city of performance; each row will also receive the appropriate poet's name and id #, and columns containing the birth city's name and id and other city's name and id.
this works to create curved lines. 

SELECT
lines.poet_name,
lines.poetid,
lines.birth_city_name,
lines.birth_cityid,
lines.other_city_name,
lines.other_cityid,
lines.the_geom,
lines.sources,
lines.poet_link,
info.instrument_names,
info.genre_names,
info.date_names
FROM
	(SELECT birth_cities.poet_name,
	birth_cities.poetid,
	birth_cities.city_name as birth_city_name,
	birth_cities.cityid as birth_cityid,
	birth_cities.poet_link,
	other_cities.city_name as other_city_name,
	other_cities.cityid as other_cityid,
	other_cities.sources,
	ST_Transform(ST_Segmentize(ST_MakeLine(
		ST_Transform(other_cities.the_geom, 953027),
		ST_Transform(birth_cities.the_geom, 953027)
		), 100000 ), 4326 ) as the_geom
	FROM
	
		(SELECT 
		sorted_poets.poet_name,
		sorted_poets.cityid,
		sorted_poets.poetid,
		sorted_poets.poet_link,
		cities.city_name,
		cities.the_geom,
		cities.the_geom_webmercator
		FROM cities, (SELECT 
				poets.poet_name,
				poets_cities.cityid,
				poets.poetid,
				poets.poet_link
				FROM poets, poets_cities 
				WHERE poets.poetid = poets_cities.poetid 
				AND poets_cities.relationshipid = 1
				) sorted_poets		
		WHERE sorted_poets.cityid = cities.cityid) birth_cities,
		
		(SELECT 
		sorted_poets.poet_name,
		sorted_poets.cityid,
		sorted_poets.poetid,
		sorted_poets.sources,
		cities.city_name,
		cities.the_geom,
		cities.the_geom_webmercator
		FROM cities, (SELECT 
				poets.poet_name,
				poets_cities.cityid,
				poets.poetid,
				poets.sources
				FROM poets, poets_cities 
				WHERE poets.poetid = poets_cities.poetid 
				AND (poets_cities.relationshipid = 2
				OR poets_cities.relationshipid = 3)
				) sorted_poets		
		WHERE sorted_poets.cityid = cities.cityid) other_cities
		
	WHERE birth_cities.poetid = other_cities.poetid) lines
	
	LEFT OUTER JOIN
	
	(SELECT
	poets.poetid,
	poets.poet_name,
	poets_instruments.instrument_names,
	poets_genres.genre_names,
	poets_dates.date_names
	FROM
		poets
		
		LEFT OUTER JOIN
	
			(SELECT 
				sorted_poets.poetid,
				sorted_poets.poet_name,
				string_agg(sorted_instruments.instrument, ', ') as instrument_names
			FROM (SELECT * FROM instruments ORDER BY instrument DESC) sorted_instruments, 
				(SELECT 
					poets.poetid,
					poets.poet_name
					FROM poets
				GROUP BY poets.poetid, poets.poet_name
			    ) sorted_poets
			WHERE sorted_poets.poetid = sorted_instruments.poetid
			GROUP BY sorted_poets.poetid, sorted_poets.poet_name) poets_instruments
		ON poets.poetid = poets_instruments.poetid
	
		
		LEFT OUTER JOIN
		(SELECT 
			sorted_poets.poetid,
			sorted_poets.poet_name,
			string_agg(sorted_genres.genre, ', ') as genre_names
		FROM (SELECT * FROM genres ORDER BY genre DESC) sorted_genres, 
			(SELECT 
				poets.poetid,
				poets.poet_name
				FROM poets
			GROUP BY poets.poetid, poets.poet_name
		    ) sorted_poets
		WHERE sorted_poets.poetid = sorted_genres.poetid
		GROUP BY sorted_poets.poetid, sorted_poets.poet_name) poets_genres
		on poets.poetid = poets_genres.poetid
		
		LEFT OUTER JOIN
		(SELECT 
			sorted_poets.poetid,
			sorted_poets.poet_name,
			string_agg(sorted_dates.date, ', ') as date_names
		FROM (SELECT * FROM dates ORDER BY date DESC) sorted_dates, 
			(SELECT 
				poets.poetid,
				poets.poet_name
				FROM poets
			GROUP BY poets.poetid, poets.poet_name
		    ) sorted_poets
		WHERE sorted_poets.poetid = sorted_dates.poetid
		GROUP BY sorted_poets.poetid, sorted_poets.poet_name) poets_dates
		ON poets.poetid = poets_dates.poetid
	
	) info

ON lines.poetid = info.poetid